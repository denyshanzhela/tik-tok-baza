from flask import Flask, jsonify
import requests
import datetime
import os
import logging
from google.cloud import bigquery

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ACCESS_TOKEN = os.getenv('ACCESS_TOKEN', 'ae207063979208834126b148731b75d90eb5482')
ADVERTISER_ID = os.getenv('ADVERTISER_ID', '7499963290844545040')
PROJECT_ID = os.getenv('PROJECT_ID', 'disco-bedrock-428721-f8')
DATASET_ID = os.getenv('DATASET_ID', 'tik_tok')
TABLE_ID = os.getenv('TABLE_ID', 'tiktok_ads_stats')

def get_yesterday():
    today = datetime.date.today()
    return (today - datetime.timedelta(days=1)).isoformat()

def get_ads_stats():
    logger.info("üöÄ –§—É–Ω–∫—Ü–∏—è get_ads_stats –∑–∞–ø—É—â–µ–Ω–∞")
    url = 'https://business-api.tiktok.com/open_api/v1.3/report/integrated/get/'
    headers = {
        'Access-Token': ACCESS_TOKEN,
        'Content-Type': 'application/json'
    }
    
    yesterday = get_yesterday()
    logger.info(f"üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ TikTok API –∑–∞ {yesterday}")
    
    payload = {
        "advertiser_id": ADVERTISER_ID,
        "report_type": "BASIC",
        "data_level": "AUCTION_AD",
        "dimensions": ["ad_id"],
        "metrics": ["spend", "impressions", "clicks"],
        "start_date": yesterday,
        "end_date": yesterday,
        "page_size": 1000
    }
    
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ TikTok API: {payload}")
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        data = response.json()
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç TikTok API: {data}")

        if "data" not in data or "list" not in data["data"]:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {data}")
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")

        stats = data["data"]["list"]
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(stats)} –∑–∞–ø–∏—Å–µ–π")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞
        for row in stats:
            row['report_date'] = yesterday

        return stats

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise


def upload_to_bigquery(rows):
    if not rows:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ BigQuery")
        return False
        
    logger.info(f"üìä –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ {len(rows)} —Å—Ç—Ä–æ–∫ –≤ BigQuery")
    
    try:
        client = bigquery.Client()
        table_ref = f"{PROJECT_ID}.{DATASET_ID}.{TABLE_ID}"
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—É {table_ref}")
        table = client.get_table(table_ref)
        logger.info(f"‚ÑπÔ∏è –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã: {table.schema}")
        
        errors = client.insert_rows_json(table_ref, rows)
        
        if errors:
            logger.error(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {errors}")
            return False
            
        logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫")
        return True
        
    except Exception as e:
        logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ BigQuery: {str(e)}")
        raise

@app.route('/')
def health_check():
    logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞")
    return jsonify({"status": "healthy"}), 200

@app.route('/run', methods=['POST'])
def run_etl():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ ETL-–ø—Ä–æ—Ü–µ—Å—Å–∞")
        
        stats = get_ads_stats()
        if not stats:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return jsonify({"status": "success", "message": "No data to process"}), 200
            
        success = upload_to_bigquery(stats)
        
        if success:
            logger.info("‚ú® ETL-–ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return jsonify({
                "status": "success",
                "message": "Data processed successfully",
                "rows_processed": len(stats)
            }), 200
        else:
            logger.error("üí• ETL-–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            return jsonify({
                "status": "partial_success",
                "message": "Data processed with some errors"
            }), 207
            
    except Exception as e:
        logger.error(f"üíÄ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ ETL: {str(e)}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500
